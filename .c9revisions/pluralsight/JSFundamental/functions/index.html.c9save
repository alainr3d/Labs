{"ts":1353356750753,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<html>\n    <head>\n        <title> </title>\n        <sdasf\n    </head>\n    <body>\n\n    </body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":118}]],"length":118}
{"contributors":[],"silentsave":false,"ts":1353315035180,"patch":[[{"diffs":[[0,"  <s"],[-1,"dasf"],[1,"cript type=\"text/javascript\">\n        // ctrl+space for autocomplete\n        \n        //everything is an object\n        \n        //standard\n        function square(x)\n        {\n            return x*x;\n        }\n        \n        //variable set function\n        var squareFunc = function square(x)\n        {\n            return x*x;\n        };\n        \n        //variable set ANONYMOUS function\n        var squareFunc = function (x)\n        {\n            return x*x;\n        };\n        \n        //anonymous immidiately invoked\n        //protects global pollution\n        //varialble aliasing\n        (function(x){\n            return x*x;\n        })(numberToSquare);\n        \n        //jquery plugin sample\n        (function($){\n            //implement jquery\n            })(jQuery);\n        \n        //INVOCATION\n        var squareFunc = function (x)\n        {\n            return x*x;\n        };\n        \n        function square(x)\n        {\n            return x*x;\n        };\n        \n        square(70);\n        \n        function add(num1,num2,num3){\n            return num + num2 + num3;\n        };\n        \n        function add(num1,num2){\n            return num + num2;\n        };\n        \n        //javsacript NO function overloading\n        //name is the game\n        //extra param is ignored\n        //Object params by reference\n        \n        //!!!!!function retain value if passed by object\n        //!!!!!function retains reference if passed by primitive\n        \n        // ARGUMENTS OBJECT\n        \n        /*\n        local variable available within all functions\n        contains the functions parameters\n        indexed like an array\n        Has a length property\n        \n        */\n        \n        function argumentsType(){\n            return typeof arguments;\n        }\n        \n        console.log(argumentsType(\"a\"));\n        \n        // RECURSION\n        /*\n        a function may call itself\n        \n        its like a loop\n        make sure check for a good exit (another return statement if meet condition)\n        */\n        (function factorial(n){\n        if(n===0 || n ===1){\n            return 1;\n        }\n        return n * factorial(n - 1);\n    })(5);\n        \n        </script>"],[0,"\n   "]],"start1":65,"start2":65,"length1":12,"length2":2218}]],"length":2324,"saved":false}
{"ts":1353315040721,"patch":[[{"diffs":[[0,"n - 1);\n"],[1,"    "],[0,"    })(5"]],"start1":2234,"start2":2234,"length1":16,"length2":20}]],"length":2328,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353326047760,"patch":[[{"diffs":[[0,"  <s"],[-1,"dasf"],[1,"cript type=\"text/javascript\">\n        // ctrl+space for autocomplete\n        \n        //everything is an object\n        \n        //standard\n        function square(x)\n        {\n            return x*x;\n        }\n        \n        //variable set function\n        var squareFunc = function square(x)\n        {\n            return x*x;\n        };\n        \n        //variable set ANONYMOUS function\n        var squareFunc = function (x)\n        {\n            return x*x;\n        };\n        \n        //anonymous immidiately invoked\n        //protects global pollution\n        //varialble aliasing\n        (function(x){\n            return x*x;\n        })(numberToSquare);\n        \n        //jquery plugin sample\n        (function($){\n            //implement jquery\n            })(jQuery);\n        \n        //INVOCATION\n        var squareFunc = function (x)\n        {\n            return x*x;\n        };\n        \n        function square(x)\n        {\n            return x*x;\n        };\n        \n        square(70);\n        \n        function add(num1,num2,num3){\n            return num + num2 + num3;\n        };\n        \n        function add(num1,num2){\n            return num + num2;\n        };\n        \n        //javsacript NO function overloading\n        //name is the game\n        //extra param is ignored\n        //Object params by reference\n        \n        //!!!!!function retain value if passed by object\n        //!!!!!function retains reference if passed by primitive\n        \n        // ARGUMENTS OBJECT\n        \n        /*\n        local variable available within all functions\n        contains the functions parameters\n        indexed like an array\n        Has a length property\n        \n        */\n        \n        function argumentsType(){\n            return typeof arguments;\n        }\n        \n        console.log(argumentsType(\"a\"));\n        \n        // RECURSION\n        /*\n        a function may call itself\n        \n        its like a loop\n        make sure check for a good exit (another return statement if meet condition)\n        */\n        (function factorial(n){\n        if(n===0 || n ===1){\n            return 1;\n        }\n        return n * factorial(n - 1);\n        })(5);\n        \n        </script>"],[0,"\n   "]],"start1":65,"start2":65,"length1":12,"length2":2222}]],"length":2328,"saved":false}
