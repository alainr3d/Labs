{"ts":1354913246277,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"jQuery(function($){\n  \n  // Our basic Todo model has `content` and `done` attributes.\n  window.Todo = Backbone.Model.extend({\n    defaults: {\n      done: false\n    },\n\n    toggle: function() {\n      this.save({done: !this.get(\"done\")});\n    }\n  });\n  \n  window.TodoList = Backbone.Collection.extend({\n    model: Todo,\n\n    // Save all of the todo items under the `\"todos\"` namespace.\n    localStorage: new Store(\"todos\"),\n\n    // Filter down the list of all todo items that are finished.\n    done: function() {\n      return this.filter(function(todo){ return todo.get('done'); });\n    },\n\n    remaining: function() {\n      return this.without.apply(this, this.done());\n    }\n  });\n\n  // Create our global collection of Todos.\n  window.Todos = new TodoList;\n  \n  window.TodoView = Backbone.View.extend({\n\n    //... is a list tag.\n    tagName:  \"li\",\n\n    // Cache the template function for a single item.\n    template: $(\"#item-template\").template(),\n\n    events: {\n      \"change   .check\"        : \"toggleDone\",\n      \"dblclick .todo-content\" : \"edit\",\n      \"click    .todo-destroy\" : \"destroy\",\n      \"keypress .todo-input\"   : \"updateOnEnter\",\n      \"blur     .todo-input\"   : \"close\"\n    },\n\n    initialize: function() {\n      _.bindAll(this, 'render', 'close', 'remove', 'edit');\n      this.model.bind('change', this.render);\n      this.model.bind('destroy', this.remove);\n    },\n\n    render: function() {\n      var element = jQuery.tmpl(this.template, this.model.toJSON());\n      $(this.el).html(element);\n      this.input = this.$(\".todo-input\");\n      return this;\n    },\n\n    toggleDone: function() {\n      this.model.toggle();\n    },    \n\n    // Switch this view into `\"editing\"` mode, displaying the input field.\n    edit: function() {\n      $(this.el).addClass(\"editing\");\n      this.input.focus();\n    },\n\n    // Close the `\"editing\"` mode, saving changes to the todo.\n    close: function(e) {\n      this.model.save({content: this.input.val()});\n      $(this.el).removeClass(\"editing\");\n    },\n\n    // If you hit `enter`, we're through editing the item.\n    updateOnEnter: function(e) {\n      if (e.keyCode == 13) e.target.blur();\n    },\n\n    remove: function() {\n      $(this.el).remove();\n    },\n\n    destroy: function() {\n      this.model.destroy();\n    }\n  });\n  \n  // Our overall **AppView** is the top-level piece of UI.\n  window.AppView = Backbone.View.extend({\n\n    // Instead of generating a new element, bind to the existing skeleton of\n    // the App already present in the HTML.\n    el: $(\"#todoapp\"),\n\n    statsTemplate: $(\"#stats-template\").template(),\n\n    events: {\n      \"keypress #new-todo\":  \"createOnEnter\",\n      \"click .todo-clear a\": \"clearCompleted\"\n    },\n\n    // At initialization we bind to the relevant events on the `Todos`\n    // collection, when items are added or changed. Kick things off by\n    // loading any preexisting todos that might be saved in *localStorage*.\n    initialize: function() {\n      _.bindAll(this, 'addOne', 'addAll', 'render');\n\n      this.input    = this.$(\"#new-todo\");\n\n      Todos.bind('add',     this.addOne);\n      Todos.bind('refresh', this.addAll);\n      Todos.bind('all',     this.render);\n\n      Todos.fetch();\n    },\n\n    // Re-rendering the App just means refreshing the statistics -- the rest\n    // of the app doesn't change.\n    render: function() {\n      var done = Todos.done().length;\n      var element = jQuery.tmpl(this.statsTemplate, {\n        total:      Todos.length,\n        done:       Todos.done().length,\n        remaining:  Todos.remaining().length\n      });\n      this.$('#todo-stats').html(element);\n    },\n\n    // Add a single todo item to the list by creating a view for it, and\n    // appending its element to the `<ul>`.\n    addOne: function(todo) {\n      var view = new TodoView({model: todo});\n      this.$(\"#todo-list\").append(view.render().el);\n    },\n\n    // Add all items in the **Todos** collection at once.\n    addAll: function() {\n      Todos.each(this.addOne);\n    },\n\n    // If you hit return in the main input field, create new **Todo** model\n    createOnEnter: function(e) {\n      if (e.keyCode != 13) return;\n\n      var value = this.input.val();\n      if ( !value ) return;\n\n      Todos.create({content: value});\n      this.input.val('');\n    },\n\n    clearCompleted: function() {\n      _.each(Todos.done(), function(todo){ todo.destroy(); });\n      return false;\n    }\n  });\n\n  // Finally, we kick things off by creating the **App**.\n  window.App = new AppView;\n});"]],"start1":0,"start2":0,"length1":0,"length2":4480}]],"length":4480}
